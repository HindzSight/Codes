S Single Responsibility Principle : The Single Responsibility Principle states that a class should do one thing and therefore it should have only a single reason to change.

O Open-Closed Principle : The Open-Closed Principle requires that classes should be open for extension and closed to modification.
New definition: "You should be able to use and add to a module without rewriting it."
L Liskov Substitution Principle : The Liskov Substitution Principle states that subclasses should be substitutable for their base classes.

This means that, given that class B is a subclass of class A, we should be able to pass an object of class B to any method that expects an object of class A and the method should not give any weird output in that case.
New definition: You should be able to substitute one thing for another if those things are declared to behave the same way.
I Interface Segregation Principle : 
Segregation means keeping things separated, and the Interface Segregation Principle is about separating the interfaces.
New Definition: "Don't show your clients more than they need to see".
The principle states that many client-specific interfaces are better than one general-purpose interface. Clients should not be forced to implement a function they do no need.
D Dependency Inversion Principle : The Dependency Inversion principle states that our classes should depend upon interfaces or abstract classes instead of concrete classes and functions.
New definition: "Depend upon abstractions, not concretions."
stackoverflow.blog/2021/11/01/why-solid-principles-are-still-the-foundation-for-modern-software-architecture/
https://www.reddit.com/r/learnprogramming/comments/cr3m01/solid_design_principles_for_everyone/?rdt=45735