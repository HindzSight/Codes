#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

int
main(int argc, char *argv[])
{
    printf("hello world (pid:%d)\n", (int) getpid());
    int rc = fork();
    int rc1= fork();
    int rc2= fork();
    if (rc < 0) {
        // fork failed; exit
        fprintf(stderr, "fork failed\n");
        exit(1);
    } else if (rc == 0) {
        // child (new process)
        printf("hello, I am child 1 (pid:%d)\n", (int) getpid());
    } else if (rc1 == 0)
{printf("hello, I am child 2 (pid:%d)\n", (int) getpid());
}
else if (rc2 == 0)
{printf("hello, I am child 3 (pid:%d)\n", (int) getpid());
}
	
	 else {
        // parent goes down this path (original process)
        printf("hello, I am parent of %d (pid:%d)\n",
	       rc, (int) getpid());
    }
    return 0;
}

/*
Made 3 fork() calls 
[JUET@UnixServer ~]$ ls
common.h  cpu.c     p1    p2    p3    p4    p4.output
cpu       Makefile  p1.c  p2.c  p3.c  p4.c  README.md
[JUET@UnixServer ~]$ vim test.c
[JUET@UnixServer ~]$ gcc test.c -o test
[JUET@UnixServer ~]$ ./test
hello world (pid:11826)
hello, I am parent of 11828 (pid:11826)
[JUET@UnixServer ~]$ hello, I am child 1 (pid:11828)
hello, I am child 2 (pid:11829)
hello, I am child 3 (pid:11830)
hello, I am child 1 (pid:11832)
hello, I am child 1 (pid:11833)
hello, I am child 2 (pid:11834)
hello, I am child 1 (pid:11836)
^C
[JUET@UnixServer ~]$
Made 2 fork() calls 
[JUET@UnixServer ~]$ vim test.c
[JUET@UnixServer ~]$ gcc test.c -o test
[JUET@UnixServer ~]$ ./test
hello world (pid:15819)
hello, I am parent of 15822 (pid:15819)
[JUET@UnixServer ~]$ hello, I am child 1 (pid:15822)
hello, I am child 2 (pid:15823)
hello, I am child 1 (pid:15826)

8 Process are created for 3 fork() calls;
For n fork() calls 2^n Process will be created 
*/