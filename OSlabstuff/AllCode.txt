#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_SIZE 100

void lru(char* s, int frame_size) {
    int n = strlen(s);

    int* frame = (int*)malloc(sizeof(int) * frame_size);
    memset(frame, -1, sizeof(int) * frame_size);
    int hit = 0;
    for (int i = 0; i < n; i++) {
        int current_value = s[i] - '0';

        int flag = 0;
        for (int j = 0; j < frame_size; j++) {
            if (frame[j] == current_value) {
                printf("Hit for value %d\n", current_value);
                flag = 1;
                hit += 1;
                break;
            }
        }
        if (flag == 1) {
            // hit condition
            continue;
        }

        int* set = (int*)malloc(sizeof(int) * frame_size);
        memset(set, -1, sizeof(int) * frame_size);
        int third_unique = -1;
        for (int j = i - 1; j >= 0; j--) {
            int temp = s[j] - '0';
            int k;
            for (k = 0; k < frame_size; k++) {
                if (set[k] == temp) {
                    break;
                }
            }
            if (k == frame_size) {
                for (k = 0; k < frame_size; k++) {
                    if (frame[k] == set[0]) {
                        frame[k] = temp;
                        break;
                    }
                }
                if (k == frame_size) {
                    frame[0] = temp;
                }
                third_unique = temp;
                break;
            }
            set[k] = temp;
        }

        if (third_unique == -1) {
            int j;
            for (j = 0; j < frame_size; j++) {
                if (frame[j] == -1) {
                    frame[j] = current_value;
                    break;
                }
            }
            if (j == frame_size) {
                for (j = 0; j < frame_size - 1; j++) {
                    frame[j] = frame[j + 1];
                }
                frame[j] = current_value;
            }
        }
        free(set);

        printf("Frame:: ");
        for (int j = 0; j < frame_size; j++) {
            printf("%d ", frame[j]);
        }
        printf("\n");
    }
    printf("Page Fault : %d\n", n - hit);

    free(frame);
}

int main() {
    char ref_string[MAX_SIZE];
    int n;

    printf("Enter the reference string:\n");
    scanf("%s", ref_string);
    printf("Enter the frame number:\n");
    scanf("%d", &n);

    lru(ref_string, n);

    return 0;
}


/***********************************/

#include <stdio.h>
#include <limits.h>
#include <string.h>

void oprp(char s[], int frame_size)
{
    int n = strlen(s);
    int hit_count = 0;
    int frame[frame_size];
    int frame_index = 0;

    for (int i = 0; i < n; i++)
    {
        int current_value = s[i] - '0';

        int flag = 0;
        for (int j = 0; j < frame_index; j++)
        {
            if (frame[j] == current_value)
            {
                printf("Hit for value %d\n", current_value);
                hit_count++;
                flag = 1;
                break;
            }
        }

        if (flag == 1)
        {
            // hit condition
            continue;
        }

        if (frame_index < frame_size)
        {
            frame[frame_index] = current_value;
            frame_index++;
        }
        else
        {
            int index[frame_size];
            int flag2 = 0;
            for (int k = 0; k < frame_size; k++)
            {
                int ele = frame[k];
                int ele_index = INT_MAX;
                flag2 = 0;
                for (int j = i + 1; j < n; j++)
                {
                    int temp1 = s[j] - '0';
                    if (temp1 == ele)
                    {
                        index[k] = j;
                        flag2 = 1;
                        break;
                    }
                }
                if (flag2 == 0)
                {
                    index[k] = INT_MAX;
                }
            }

            int maximum_index = -1;
            int maximum_index_value = -1;
            for (int j = 0; j < frame_size; j++)
            {
                if (index[j] > maximum_index_value)
                {
                    maximum_index_value = index[j];
                    maximum_index = j;
                }
            }

            int ele1 = s[maximum_index] - '0';
            frame[maximum_index] = current_value;
        }

        printf("Frame:: ");
        for (int j = 0; j < frame_index; j++)
        {
            printf("%d ", frame[j]);
        }
        printf("\n");
    }
    printf("\nPage Fault:: %d\n", n - hit_count);
}

int main()
{
    int n;
    char ref_string[100];
    printf("Enter the reference string\n");
    scanf("%s", ref_string);
    printf("Enter the frame number\n");
    scanf("%d", &n);

    oprp(ref_string, n);

    return 0;
}

/********************************************/

#include<stdio.h>
#include<stdlib.h>
#include<string.h>

struct Node {
    struct Node* NEXT;
    int info;
};

typedef struct Node Node;

Node* createNode(int val) {
    Node* new_node = (Node*) malloc(sizeof(Node));
    if(new_node == NULL) {
        printf("------QUEUE OVERFLOW------\n");
        return NULL;
    } else {
        new_node->NEXT = NULL;
        new_node->info = val;
        return new_node;
    }
}

void Enqueue(Node** top, Node** tail, int data) {
    Node *new_node = createNode(data);
    if(new_node != NULL) {
        if(*top == NULL && *tail == NULL) {
            *top = new_node;
            *tail = new_node;
        } else {
            (*tail)->NEXT = new_node;
            *tail = new_node;
        }
    }
}

void Dequeue(Node** top, Node** tail) {
    if(*top == NULL) {
        printf("------QUEUE UNDERFLOW!------\n");
    } else {
        Node *temp = *top;
        if (*top == *tail) {
            *top = NULL;
            *tail = NULL;
            free(temp);
        } else {
            *top = temp->NEXT;
            free(temp);
        }
    }
}

void disfrnt(Node** top) {
    if(*top == NULL) {
        printf("------EMPTY QUEUE------\n");
    } else {
        printf("%d\n", (*top)->info);
    }
}

void display(Node** top) {
    Node* temp = *top;
    if(*top == NULL) {
        printf("------EMPTY QUEUE!------\n");
    } else {
        printf("Frames : ");
        while(temp != NULL) {
            printf("%d ", temp->info);
            temp = temp->NEXT;
        }
        printf("\n");
    }
}

int finder(Node** top, Node** tail, int pro) {
    Node *temp = *top;
    if(*top == NULL) {
        return 0;
    } else {
        while(temp != NULL) {
            if((temp->info) == pro) {
                return 1;
            }
            temp = temp->NEXT;
        }
        return 0;
    }
}

void fifo(Node** top, Node** tail, char* s, int frames) {
    int i = 0;
    int n = strlen(s);
    int hit = 0;
    Node *temp = NULL;
    while(i < n) {
        temp = *top;
        Node *temp1 = *top;
        int val = 0;
        while(temp != NULL) {
            val++;
            temp = temp->NEXT;
        }
        int current_value = s[i] - '0';
        if(val == frames) {
            if(finder(top, tail, current_value)) {
                hit++;
                printf("Frames : HIT!\n");
                //display(top);
            } else {
                Dequeue(top, tail);
                Enqueue(top, tail, current_value);
                display(top);
            }
            i++;
        } else {
            Enqueue(top, tail, current_value);
            display(top);
            i++;
        }
    }
    printf("Page Faults : %d\n", (n-hit));
}

int main() {
    Node* head = NULL;
    Node* tail = NULL;

    printf("FIFO Page Replacement Algorithm : \n");
    char ref_str[100];
    printf("\nEnter the reference string without spaces : ");
    scanf("%s", ref_str);
    int n;
	printf("Enter the frame number\n");
    scanf("%d", &n);
    fifo(ref_string, n);
    return 0;
}

/**********************************************************/

#include<stdio.h>

int main()
{
    float v_add;
    float base;
    printf("Enter the Virtual Address to be relocated(in Bytes): ");
    scanf("%f", &v_add);
    printf("Enter the base Address of the block(in KB) : ");
    scanf("%f", &base);

    /*
     * code 0 to 4 KB
     * heap 4KB to 8KB
     * stack 16KB to 12KB
     */

    if(v_add > 0 && v_add < 2*1024)
    {
        float offset;
        offset = v_add;
        if(offset > 2*1024 )
        {
            printf("Segmentation fault\n");
        }
        else
        {
            float p_add = base*1024 + offset;
            printf("Physical Address : (in B) %f\n", p_add);
        }
    }
    else if(v_add > 4*1024 && v_add < 7*1024)
    {
        float offset;
        offset = v_add - 4*1024;

        if(offset > 4*1024 )
        {
            printf("Segmentation fault\n");
        }
        else
        {
            float p_add = base*1024 + offset;
            printf("Physical Address : (in B) %f\n", p_add);
        }
    }
    else if(v_add > 14*1024 && v_add < 16*1024)
    {
        float offset;
        offset = v_add - 16*1024;

        if(offset > 14*1024 )
        {
            printf("Segmentation fault\n");
        }
        else
        {
            float p_add = base*1024 + offset;
            printf("Physical Address : (in B) %f\n", p_add);
        }
    }
    else
    {
        printf("Segmentation Fault\n");
    }

    return 0;
}
 /***************************************************/
 
 #include<stdio.h>

int main()
{
    int v_add;
    int base_code = 32;
    int base_heap = 34;
    int base_stack = 28;

    int a[14], n, i;
    printf("Enter Virtual Address to be relocated (in B): ");
    scanf("%d", &v_add);
    n = v_add;
    for(int j=0; j<14; j++)
    {
        a[j]=0;
    }
    for(i=0; n>0; i++)
    {
        a[i]=n%2;
        n= n/2;
    }
    int offset = 0;
    int place = 1;
    for(int k=0; k<12; k++)
    {
        offset = offset + place*a[k];
        place = place * 2;
    }

    if (a[13] == 0 && a[12] == 0)
    {
        if(offset > 2*1024)
        {
            printf("Segmentation Fault\n");
        }
        else
        {
            /*Code Segment*/
            int p_add = 0;
            p_add = offset + base_code*1024;
            printf("Physical Address : (in B) %d\n", p_add);
        }
    }
    else if (a[13] == 0 && a[12] == 1)
    {
        if(offset > 3*1024)
        {
            printf("Segmentation Fault\n");
        }
        else
        {
            /*Heap Segment*/
            int p_add = 0;
            p_add = offset + base_heap*1024;
            printf("Physical Address : (in B) %d\n", p_add);
        }
    }
    else if(a[13] == 1 && a[12] == 1)
    {
        if(offset > 2*1024)
        {
            printf("Segmentation Fault\n");
        }
        else
        {
            /*Stack Segment*/
            int p_add = 0;
            offset = offset - 4*1024;
            p_add = offset + base_stack*1024;
            printf("Physical Address : (in B) %d\n", p_add);
        }
    }
    else
    {
        printf("Segment fault;\n");
    }
    return 0;
}

/*
*     printf("Binary of the given number= ");
*     for(i=13 ; i>=0 ; i--)
*     {
*         printf("%d",a[i]); // Binary array reverse stored in a[14]
*     }
*
*
*         a[13] a[12]\
*         0      0       Code
*         0      1       Heap
*         1      0        --
*         1      1       Stack
*         */


/******************************/

#include <stdio.h>

int main() {
    int num_processes, burst_time[50], wait_time[50], turnaround_time[50], i;
    float avg_wait_time = 0, avg_turnaround_time = 0;

    printf("Enter the number of processes: ");
    scanf("%d", &num_processes);

    // Input burst time of each process
    printf("Enter burst time of each process:\n");
    for (i = 0; i < num_processes; i++) {
        printf("Process %d: ", i + 1);
        scanf("%d", &burst_time[i]);
    }

    // Calculate waiting time for each process
    wait_time[0] = 0;
    for (i = 1; i < num_processes; i++) {
        wait_time[i] = wait_time[i - 1] + burst_time[i - 1];
        avg_wait_time += wait_time[i];
    }

    // Calculate turnaround time for each process
    for (i = 0; i < num_processes; i++) {
        turnaround_time[i] = wait_time[i] + burst_time[i];
        avg_turnaround_time += turnaround_time[i];
    }

    // Calculate average waiting time and average turnaround time
    avg_wait_time /= num_processes;
    avg_turnaround_time /= num_processes;

    // Print the results
    printf("\nProcess\tBurst Time\tWaiting Time\tTurnaround Time\n");
    for (i = 0; i < num_processes; i++) {
        printf("%d\t%d\t\t%d\t\t%d\n", i + 1, burst_time[i], wait_time[i], turnaround_time[i]);
    }
    printf("\nAverage Waiting Time: %.2f", avg_wait_time);
    printf("\nAverage Turnaround Time: %.2f\n", avg_turnaround_time);

    return 0;
}

/*******************************/




#include <stdio.h>
#include <limits.h>

struct Process {
    int pid; 
    int bt; 
    int art; 
};
void findWaitingTime(struct Process proc[], int n, int wt[]) {
    int rt[n];

    for (int i = 0; i < n; i++)
        rt[i] = proc[i].bt;

    int complete = 0, t = 0, minm = INT_MAX;
    int shortest = 0, finish_time;
    bool check = false;
    while (complete != n) {
        for (int j = 0; j < n; j++) {
            if ((proc[j].art <= t) && (rt[j] < minm) && rt[j] > 0) {
                minm = rt[j];
                shortest = j;
                check = true;
            }
        }

        if (check == false) {
            t++;
            continue;
        }

        rt[shortest]--;

        minm = rt[shortest];
        if (minm == 0)
            minm = INT_MAX;

        if (rt[shortest] == 0) {

            complete++;
            check = false;

            finish_time = t + 1;


            wt[shortest] = finish_time - proc[shortest].bt - proc[shortest].art;

            if (wt[shortest] < 0)
                wt[shortest] = 0;
        }

        t++;
    }
}

void findTurnAroundTime(struct Process proc[], int n, int wt[], int tat[]) {

    for (int i = 0; i < n; i++)
        tat[i] = proc[i].bt + wt[i];
}

void findavgTime(struct Process proc[], int n) {
    int wt[n], tat[n], total_wt = 0, total_tat = 0;


    findWaitingTime(proc, n, wt);


    findTurnAroundTime(proc, n, wt, tat);

    printf(" P\t\tBT\t\tWT\t\tTAT\t\t\n");


    for (int i = 0; i < n; i++) {
        total_wt = total_wt + wt[i];
        total_tat = total_tat + tat[i];
        printf(" %d\t\t%d\t\t %d\t\t %d\n", proc[i].pid, proc[i].bt, wt[i], tat[i]);
    }

    printf("\nAverage waiting time = %f", (float)total_wt / (float)n);
    printf("\nAverage turn around time = %f", (float)total_tat / (float)n);
}


int main() {
    int n;
    printf("Enter the number of processes: ");
scanf("%d", &n);

struct Process proc[n];


for (int i = 0; i < n; i++) {
    printf("Enter details for process %d:\n", i + 1);
    printf("PID: ");
    scanf("%d", &proc[i].pid);
    printf("Burst time: ");
    scanf("%d", &proc[i].bt);
    printf("Arrival time: ");
    scanf("%d", &proc[i].art);
}


findavgTime(proc, n);

return 0;

}

/**************************************/

#include <stdio.h>
#include <stdbool.h>

struct Process {
    int pid; 
    int bt; 
    int art; 
};

void findWaitingTime(struct Process proc[], int n, int wt[], int quantum) {
    int rt[n];

    for (int i = 0; i < n; i++)
        rt[i] = proc[i].bt;

    int t = 0; // Current time
    bool check = false;

    while (true) {
        bool done = true;

        for (int i = 0; i < n; i++) {
 
            if (rt[i] > 0) {
                done = false;

                if (proc[i].art <= t) {
                    check = true;

                    if (rt[i] <= quantum) {
                        t += rt[i];
                        rt[i] = 0;
                        wt[i] = t - proc[i].bt - proc[i].art;

                        if (wt[i] < 0)
                            wt[i] = 0;
                    } 
      
                    else {
                        rt[i] -= quantum;
                        t += quantum;
                    }
                }

                else if (check == false) {
                    t++;
                }
            }
        }


        if (done == true)
            break;
    }
}


void findTurnAroundTime(struct Process proc[], int n, int wt[], int tat[]) {

    for (int i = 0; i < n; i++)
        tat[i] = proc[i].bt + wt[i];
}

void findAvgTime(struct Process proc[], int n, int quantum) {
    int wt[n], tat[n], total_wt = 0, total_tat = 0;

    findWaitingTime(proc, n, wt, quantum);

    findTurnAroundTime(proc, n, wt, tat);

    printf("P\tBT\tWT\tTAT\n");

    for (int i = 0; i < n; i++) {
        total_wt += wt[i];
        total_tat += tat[i];
        printf("%d\t%d\t%d\t%d\n", proc[i].pid, proc[i].bt, wt[i], tat[i]);
    }

    float avg_wt = (float)total_wt / (float)n;
    float avg_tat = (float)total_tat / (float)n;
    printf("\nAverage Waiting Time: %f", avg_wt);
    printf("\nAverage Turnaround Time: %f\n", avg_tat);
}

int main() {
    int n, quantum;
	printf("Enter the number of processes: ");
scanf("%d", &n);

struct Process proc[n];

for (int i = 0; i < n; i++) {
    printf("\nEnter details for process %d\n", i+1);
    printf("Enter process ID: ");
    scanf("%d", &proc[i].pid);
    printf("Enter burst time: ");
    scanf("%d", &proc[i].bt);
    printf("Enter arrival time: ");
    scanf("%d", &proc[i].art);
}

printf("\nEnter time quantum: ");
scanf("%d", &quantum);

findAvgTime(proc, n, quantum);

return 0;
}


/***********************************************/

#include <stdio.h>
#include <stdlib.h>
#include <time.h>

struct Process {
    int pid; 
    int bt; 
    int ticket; /
};


int randomNum(int min, int max) {
    return rand() % (max - min + 1) + min;
}

void findWaitingTime(struct Process proc[], int n, int wt[]) {
    int t = 0; // Current time
    int done = 0; 
    int total_tickets = 0; 
    int winner_ticket; 
    int winner_pid; 
    int i; // Loop counter

    for (i = 0; i < n; i++)
        total_tickets += proc[i].ticket;
    while (done < n) {
        winner_ticket = randomNum(1, total_tickets);
        for (i = 0; i < n; i++) {
    
            if (proc[i].bt > 0) {
                winner_ticket -= proc[i].ticket;
               
                if (winner_ticket <= 0) {
                    winner_pid = proc[i].pid;
                 
                    proc[i].bt--;
                 
                    if (proc[i].bt == 0) {
                        done++;
                        wt[i] = t + 1 - proc[i].ticket; // Calculate waiting time
                    }
                    break;
                }
            }
        }
        t++; 
    }
}

void findTurnAroundTime(struct Process proc[], int n, int wt[], int tat[]) {
    // Calculate turn around time by adding bt[i] + wt[i]
    for (int i = 0; i < n; i++)
        tat[i] = proc[i].bt + wt[i];
}

void findAvgTime(struct Process proc[], int n) {
    int wt[n], tat[n], total_wt = 0, total_tat = 0;

    findWaitingTime(proc, n, wt);

    findTurnAroundTime(proc, n, wt, tat);

    printf("P\tBT\tTicket\tWT\tTAT\n");

    for (int i = 0; i < n; i++) {
        total_wt += wt[i];
        total_tat += tat[i];
        printf("%d\t%d\t%d\t%d\t%d\n", proc[i].pid, proc[i].bt, proc[i].ticket, wt[i], tat[i]);
    }

    float avg_wt = (float)total_wt / (float)n;
    float avg_tat = (float)total_tat / (float)n;
    printf("\nAverage Waiting Time: %f", avg_wt);
    printf("\nAverage Turnaround Time: %f\n", avg_tat);
}

int main() {
int n; 
printf("Enter the number of processes: ");
scanf("%d", &n);
truct Process proc[n]; 
srand(time(NULL)); 

for (int i = 0; i < n; i++) {
    proc[i].pid = i + 1;
    printf("Enter the burst time for process %d: ", proc[i].pid);
    scanf("%d", &proc[i].bt);
    printf("Enter the number of tickets for process %d: ", proc[i].pid);
    scanf("%d", &proc[i].ticket);
}

findAvgTime(proc, n);

return 0;
}


/***************************************************/

#include <stdio.h>

#define MAX_BLOCKS 100
#define MAX_PROCESSES 100

struct Block {
    int size; // Size of block
    int free; // 1 if block is free, 0 otherwise
};

struct Process {
    char name; // Process name
    int size; // Size of process
};

struct Block blocks[MAX_BLOCKS];
struct Process processes[MAX_PROCESSES];

int num_blocks = 0;
int num_processes = 0;

// Function to add a new memory block
void addBlock(int size) {
    blocks[num_blocks].size = size;
    blocks[num_blocks].free = 1;
    num_blocks++;
}

// Function to add a new process
void addProcess(char name, int size) {
    processes[num_processes].name = name;
    processes[num_processes].size = size;
    num_processes++;
}

// First fit algorithm
void firstFit() {
    int i, j;

    printf("\nFirst Fit:\n");

    for (i = 0; i < num_processes; i++) {
        for (j = 0; j < num_blocks; j++) {
            if (blocks[j].free == 1 && blocks[j].size >= processes[i].size) {
                printf("Process %c allocated to Block %d\n", processes[i].name, j+1);
                blocks[j].free = 0;
                blocks[j].size -= processes[i].size;
                break;
            }
        }

        if (j == num_blocks)
            printf("Process %c cannot be allocated to any block\n", processes[i].name);
    }

    for (i = 0; i < num_blocks; i++) {
        if (blocks[i].free == 1)
            printf("Block %d is unused\n", i+1);
        else
            printf("Block %d has %d bytes of internal fragmentation\n", i+1, blocks[i].size);
    }
}

// Best fit algorithm
void bestFit() {
    int i, j, best_block;

    printf("\nBest Fit:\n");

    for (i = 0; i < num_processes; i++) {
        best_block = -1;
        for (j = 0; j < num_blocks; j++) {
            if (blocks[j].free == 1 && blocks[j].size >= processes[i].size) {
                if (best_block == -1 || blocks[j].size < blocks[best_block].size)
                    best_block = j;
            }
        }

        if (best_block != -1) {
            printf("Process %c allocated to Block %d\n", processes[i].name, best_block+1);
            blocks[best_block].free = 0;
            blocks[best_block].size -= processes[i].size;
        }
        else
            printf("Process %c cannot be allocated to any block\n", processes[i].name);
    }

    for (i = 0; i < num_blocks; i++) {
        if (blocks[i].free == 1)
            printf("Block %d is unused\n", i+1);
        else
            printf("Block %d has %d bytes of internal fragmentation\n", i+1, blocks[i].size);
    }
}

// Next fit algorithm
void nextFit() {
    int i, j, last_block = 0;

    printf("\nNext Fit:\n");

    for (i = 0; i < num_processes; i++) {
        for (j = last_block; j < num_blocks;j++) {
        if (blocks[j].free == 1 && blocks[j].size >= processes[i].size) {
            printf("Process %c allocated to Block %d\n", processes[i].name, j+1);
            blocks[j].free = 0;
            blocks[j].size -= processes[i].size;
            last_block = j;
            break;
        }
    }

    if (j == num_blocks)
        printf("Process %c cannot be allocated to any block\n", processes[i].name);
}

for (i = 0; i < num_blocks; i++) {
    if (blocks[i].free == 1)
        printf("Block %d is unused\n", i+1);
    else
        printf("Block %d has %d bytes of internal fragmentation\n", i+1, blocks[i].size);
}
}

// Worst fit algorithm
void worstFit() {
int i, j, worst_block;
printf("\nWorst Fit:\n");

for (i = 0; i < num_processes; i++) {
    worst_block = -1;
    for (j = 0; j < num_blocks; j++) {
        if (blocks[j].free == 1 && blocks[j].size >= processes[i].size) {
            if (worst_block == -1 || blocks[j].size > blocks[worst_block].size)
                worst_block = j;
        }
    }

    if (worst_block != -1) {
        printf("Process %c allocated to Block %d\n", processes[i].name, worst_block+1);
        blocks[worst_block].free = 0;
        blocks[worst_block].size -= processes[i].size;
    }
    else
        printf("Process %c cannot be allocated to any block\n", processes[i].name);
}

for (i = 0; i < num_blocks; i++) {
    if (blocks[i].free == 1)
        printf("Block %d is unused\n", i+1);
    else
        printf("Block %d has %d bytes of internal fragmentation\n", i+1, blocks[i].size);
}
}
int main() {
addBlock(100);
addBlock(75);
addBlock(50);
addProcess('A', 40);
addProcess('B', 60);
addProcess('C', 30);
addProcess('D', 20);

firstFit();
bestFit();
nextFit();
worstFit();

return 0;
}

/******************Producer and Consumer*************************/

#include <pthread.h>
#include <semaphore.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

#define BUFFER_SIZE 5
int buffer[BUFFER_SIZE];
int in = 0, out = 0;
sem_t empty, full;
pthread_mutex_t mutex;

void* producer(void* arg) {
    int item;
    while (1) {
        item = rand() % 100; // Produce a random item
        sem_wait(&empty); // Wait for an empty slot
        pthread_mutex_lock(&mutex);
        buffer[in] = item; // Insert the item into buffer
        printf("Producer produced item: %d\n", item);
        in = (in + 1) % BUFFER_SIZE; // Increment the index
        pthread_mutex_unlock(&mutex);
        sem_post(&full); // Signal that a slot is full
        sleep(1); // Sleep for some time
    }
}

void* consumer(void* arg) {
    int item;
    while (1) {
        sem_wait(&full); // Wait for a full slot
        pthread_mutex_lock(&mutex);
        item = buffer[out]; // Remove an item from the buffer
        printf("Consumer consumed item: %d\n", item);
        out = (out + 1) % BUFFER_SIZE; // Increment the index
        pthread_mutex_unlock(&mutex);
        sem_post(&empty); // Signal that a slot is empty
        sleep(1); // Sleep for some time
    }
}

int main() {
    pthread_t tid1, tid2;
    sem_init(&empty, 0, BUFFER_SIZE); // Initialize empty semaphore to buffer size
    sem_init(&full, 0, 0); // Initialize full semaphore to 0
    pthread_mutex_init(&mutex, NULL); // Initialize mutex
    pthread_create(&tid1, NULL, producer, NULL); // Create producer thread
    pthread_create(&tid2, NULL, consumer, NULL); // Create consumer thread
    pthread_join(tid1, NULL); // Wait for producer thread to finish
    pthread_join(tid2, NULL); // Wait for consumer thread to finish
    sem_destroy(&empty); // Destroy empty semaphore
    sem_destroy(&full); // Destroy full semaphore
    pthread_mutex_destroy(&mutex); // Destroy mutex
    return 0;
}

/************Dinning Philosophers*************/

#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

#define NUM_PHILOSOPHERS 5
#define LEFT(i) ((i) + NUM_PHILOSOPHERS - 1) % NUM_PHILOSOPHERS
#define RIGHT(i) ((i) + 1) % NUM_PHILOSOPHERS

pthread_mutex_t forks[NUM_PHILOSOPHERS];
pthread_t philosophers[NUM_PHILOSOPHERS];

void *philosopher(void *arg) {
    int id = *(int *)arg;
    int left_fork = id;
    int right_fork = RIGHT(id);

    while (1) {
        // Thinking
        printf("Philosopher %d is thinking.\n", id);

        // Pick up forks
        pthread_mutex_lock(&forks[left_fork]);
        printf("Philosopher %d picks up fork %d.\n", id, left_fork);

        pthread_mutex_lock(&forks[right_fork]);
        printf("Philosopher %d picks up fork %d.\n", id, right_fork);

        // Eating
        printf("Philosopher %d is eating.\n", id);
        sleep(2);

        // Put down forks
        pthread_mutex_unlock(&forks[left_fork]);
        printf("Philosopher %d puts down fork %d.\n", id, left_fork);

        pthread_mutex_unlock(&forks[right_fork]);
        printf("Philosopher %d puts down fork %d.\n", id, right_fork);
    }
}

int main() {
    int i;
    int ids[NUM_PHILOSOPHERS];

    // Initialize mutexes
    for (i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_mutex_init(&forks[i], NULL);
    }

    // Create threads for philosophers
    for (i = 0; i < NUM_PHILOSOPHERS; i++) {
        ids[i] = i;
        pthread_create(&philosophers[i], NULL, philosopher, &ids[i]);
    }

    // Wait for threads to finish
    for (i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_join(philosophers[i], NULL);
    }

    // Destroy mutexes
    for (i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_mutex_destroy(&forks[i]);
    }

    return 0;
}


/*********Readers-Writers*****************/

#include <stdio.h>
#include <pthread.h>

#define MAX_READERS 5
#define MAX_WRITERS 5

int shared_resource = 0;
int num_readers = 0;

pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;
pthread_cond_t cond_read = PTHREAD_COND_INITIALIZER;
pthread_cond_t cond_write = PTHREAD_COND_INITIALIZER;

void* reader(void* arg) {
    int reader_id = *(int*) arg;
    
    while (1) {
        // Acquire the mutex lock
        pthread_mutex_lock(&mutex);
        
        // Wait if there's a writer writing to the resource
        while (num_readers == -1) {
            pthread_cond_wait(&cond_read, &mutex);
        }
        
        // Increment the number of readers
        num_readers++;
        
        // Release the mutex lock
        pthread_mutex_unlock(&mutex);
        
        // Read from the shared resource
        printf("Reader %d read shared resource: %d\n", reader_id, shared_resource);
        
        // Acquire the mutex lock
        pthread_mutex_lock(&mutex);
        
        // Decrement the number of readers
        num_readers--;
        
        // Signal the writer waiting on cond_write if there are no more readers
        if (num_readers == 0) {
            pthread_cond_signal(&cond_write);
        }
        
        // Release the mutex lock
        pthread_mutex_unlock(&mutex);
    }
}

void* writer(void* arg) {
    int writer_id = *(int*) arg;
    
    while (1) {
        // Acquire the mutex lock
        pthread_mutex_lock(&mutex);
        
        // Wait if there's another writer or if there are readers
        while (num_readers != 0) {
            pthread_cond_wait(&cond_write, &mutex);
        }
        
        // Set the number of readers to -1, indicating that a writer is writing
        num_readers = -1;
        
        // Release the mutex lock
        pthread_mutex_unlock(&mutex);
        
        // Write to the shared resource
        shared_resource++;
        printf("Writer %d wrote shared resource: %d\n", writer_id, shared_resource);
        
        // Acquire the mutex lock
        pthread_mutex_lock(&mutex);
        
        // Set the number of readers back to 0, indicating that the writer is done writing
        num_readers = 0;
        
        // Signal all readers waiting on cond_read
        pthread_cond_broadcast(&cond_read);
        
        // Signal any writer waiting on cond_write
        pthread_cond_signal(&cond_write);
        
        // Release the mutex lock
        pthread_mutex_unlock(&mutex);
    }
}

int main() {
    int i;
    pthread_t readers[MAX_READERS], writers[MAX_WRITERS];
    int reader_ids[MAX_READERS], writer_ids[MAX_WRITERS];
    
    // Create the reader threads
    for (i = 0; i < MAX_READERS; i++) {
        reader_ids[i] = i;
        pthread_create(&readers[i], NULL, reader, &reader_ids[i]);
    }
    
    // Create the writer threads
    for (i = 0; i < MAX_WRITERS; i++) {
        writer_ids[i] = i;
        pthread_create(&writers[i], NULL, writer, &writer_ids[i]);
    }
    
   
// Wait for all threads to finish
for (i = 0; i < MAX_READERS; i++) {
    pthread_join(readers[i], NULL);
}
for (i = 0; i < MAX_WRITERS; i++) {
    pthread_join(writers[i], NULL);
}

return 0;
}
